AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:

  MyLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: 'index.lambda_handler'
      Runtime: 'python3.6'
      InlineCode: |
        import json
        import botocore
        import boto3
        from logging import getLogger, INFO, DEBUG
        
        # boto3.set_stream_logger()
        # botocore.session.Session().set_debug_logger()
        
        logger = getLogger(__name__)
        # logger.setLevel(DEBUG)
        logger.setLevel(INFO)

        def lambda_handler(event, context):

            logger.info(json.dumps(event, ensure_ascii=False, indent=2))
            return 'Hello, World'

  MyStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example using an AWS Lambda function",
              "StartAt": "HelloWorld",
              "States": {
                "HelloWorld": {
                  "Type": "Task",
                  "Resource": "${lambdaArn}",
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt [ MyLambdaFunction, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"